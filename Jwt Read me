1Ô∏è‚É£  User sends login request to /auth/login with username & password
      |
      ‚Üì
2Ô∏è‚É£  AuthController receives request
      |
      ‚Üì
3Ô∏è‚É£  AuthController authenticates user using AuthenticationManager
      |
      ‚Üì
4Ô∏è‚É£  CustomUserDetailsService loads user from database
      |
      ‚Üì
5Ô∏è‚É£  If valid, AuthController calls JwtUtil to generate JWT
      |
      ‚Üì
6Ô∏è‚É£  JWT token is returned to the client
      |
      ‚Üì
7Ô∏è‚É£  Client stores JWT (in localStorage or cookies)
      |
      ‚Üì
8Ô∏è‚É£  Client sends JWT in Authorization header for protected routes
      |
      ‚Üì
9Ô∏è‚É£  JwtAuthenticationFilter intercepts request
      |
      ‚Üì
üîü  JwtUtil validates token (checks signature, expiration)
      |
      ‚Üì
1Ô∏è‚É£1Ô∏è‚É£ If valid, create Authentication object with user info
      |
      ‚Üì
1Ô∏è‚É£2Ô∏è‚É£ Set authentication into SecurityContextHolder
      |
      ‚Üì
1Ô∏è‚É£3Ô∏è‚É£ Request is authenticated ‚Äî controller processes the request


spring.application.name=SpringSecurity
server.port=9090

#JWT
jwt.secret.key=MyVerySecretJwtKeyThatIsLongEnough1234

# H2 Database Configuration
spring.datasource.url=jdbc:h2:mem:db
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect


# Hibernate configurations
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true

# Google OAuth2 Configuration
#spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
#spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:9090/login/oauth2/code/google
spring.security.oauth2.client.registration.google.client-name=Google


